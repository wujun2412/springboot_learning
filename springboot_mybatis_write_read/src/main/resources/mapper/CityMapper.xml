<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wujun.boot.dao.CityMapper">
  <resultMap id="BaseResultMap" type="com.wujun.boot.domain.City">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="province_id" jdbcType="INTEGER" property="provinceId" />
    <result column="city_name" jdbcType="VARCHAR" property="cityName" />
    <result column="description" jdbcType="VARCHAR" property="description" />
  </resultMap>
  <!--
  eviction(缓存回收策略)：
    LRU（Least Recently Used） – 最近最少使用的:移除最长时间不被使用的对象。
    FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
    SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
    WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
  flushInterval(刷新间隔):可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。
  size(引用数目):可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。
  readOnly(只读):属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。
    可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
  -->
  <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
  <sql id="Base_Column_List">
    id, province_id, city_name, description
  </sql>
  <sql id="searchSql">
    <if test="city.cityName != null">
      AND city.city_name like CONCAT('%',#{city.cityName},'%')
    </if>
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="city">
    select 
    <include refid="Base_Column_List" />
    from city
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByName" resultType="com.wujun.boot.domain.City">
    select
    <include refid="Base_Column_List"/>
    from city
    where 1=1
    <if test="name != null">
      AND city.city_name like CONCAT('%',#{name},'%')
    </if>
  </select>

  <select id="selectCities" resultType="com.wujun.boot.domain.City">
    select
    <include refid="Base_Column_List"/>
    from city
    where 1=1
    <include refid="searchSql"/>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from city
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.wujun.boot.domain.City">
    insert into city (id, province_id, city_name, 
      description)
    values (#{id,jdbcType=INTEGER}, #{provinceId,jdbcType=INTEGER}, #{cityName,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wujun.boot.domain.City">
    insert into city
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="provinceId != null">
        province_id,
      </if>
      <if test="cityName != null">
        city_name,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="provinceId != null">
        #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="cityName != null">
        #{cityName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wujun.boot.domain.City">
    update city
    <set>
      <if test="provinceId != null">
        province_id = #{provinceId,jdbcType=INTEGER},
      </if>
      <if test="cityName != null">
        city_name = #{cityName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wujun.boot.domain.City">
    update city
    set province_id = #{provinceId,jdbcType=INTEGER},
      city_name = #{cityName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>